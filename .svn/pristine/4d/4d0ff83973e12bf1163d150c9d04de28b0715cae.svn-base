package com.babpool.food.web;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.babpool.common.vo.SearchVO;
import com.babpool.food.dao.IRecommendDao;
import com.babpool.food.vo.FoodVO;
import com.babpool.food.vo.RecommendVO;
import com.babpool.member.vo.MemberVO;

@Controller
public class RecommendController {

	
	@Inject
	IRecommendDao recommendDao;
	
	@RequestMapping("/recommend.do")
	public String recommendList(Model model, @ModelAttribute("searchVO") SearchVO searchVO) throws Exception {
		System.out.println(searchVO);
		int totalRowCount = recommendDao.getTotalRowCount(searchVO);
		searchVO.setTotalRowCount(totalRowCount);
		searchVO.pageSetting();
		
		List<FoodVO> recommendList = recommendDao.getRecommendList(searchVO);
		model.addAttribute("recommendList", recommendList);
		
		return "recommend/recommend";
		
	}
	
	@ResponseBody
	@RequestMapping(value ="/recommendRegist.do" , method={RequestMethod.POST})
	public String recommendRegist(@RequestBody Map<String, Object>[] params,  HttpSession session)throws Exception{
//	public String recommendRegist(List<RecommendVO> recommendList, HttpSession session)throws Exception{
		MemberVO member = (MemberVO) session.getAttribute("member");
		RecommendVO recommend = new RecommendVO();
		recommend.setMemberId(member.getMemId());
		int cnt = recommendDao.getRecommendUser(recommend);
		
		if(member != null) {
			if(cnt >= 5) {
				return "duple";
			}else {
				
//				HttpURLConnection conn = null;
//				String responseData = "";	    	   
//				BufferedReader br = null;
//				StringBuffer sb = null;
				
				for(int i = 0 ; i < params.length; i ++) {
					RecommendVO recommendVO = new RecommendVO();
					recommendVO.setMemberId((String) params[i].get("memberId"));
					recommendVO.setFoodNo((int) params[i].get("foodNo"));
					recommendVO.setRecommendScore(String.valueOf( params[i].get("recommendScore")));
//					String.valueOf( map.get("value"));

//					recommendVO.setRecommendScore(Double.toString((double)params[i].get("recommendScore")));
					System.out.println(recommendVO);
					recommendDao.insertRecommend(recommendVO);
				}
				
//				URL url = new URL("http://192.168.1.15:5454/sim/"+member.getMemId());
//				conn = (HttpURLConnection) url.openConnection();
//				
//				conn.setRequestProperty("Accept", "application/json");	               
//				conn.setRequestMethod("GET");	        
//				
//				br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));	
//				sb = new StringBuffer();	       
//				while ((responseData = br.readLine()) != null) {
//					sb.append(responseData); //StringBuffer에 응답받은 데이터 순차적으로 저장 실시
//				}
//				//메소드 호출 완료 시 반환하는 변수에 버퍼 데이터 삽입 실시
//				returnData = sb.toString(); 
//				System.out.println(returnData);
				
			   return "success";
			 }
		} else {
			return "false";
		}
	
		
		
	
				

	}
}
